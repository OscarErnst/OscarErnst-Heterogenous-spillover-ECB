trend = 0,                  # No trend
confint = 1.96,             # 95% confidence band (normal approx)
use_nw = TRUE,              # Newey-West SEs
hor = 8                    # 12-quarter horizon
)
shockpos <- match("bund_yield", outcome_vars)  # returns 3 if bund_yield is the 3rd element
# Get the impact response of bund_yield at horizon 0
impact <- lpiv_res$irf_lin_mean[shockpos, 1]
scaling <- 1 / impact  # set impact to +1
lpiv_res$irf_lin_mean <- lpiv_res$irf_lin_mean * scaling
lpiv_res$irf_lin_low  <- lpiv_res$irf_lin_low  * scaling
lpiv_res$irf_lin_up   <- lpiv_res$irf_lin_up   * scaling
# Verify
cat("Post-normalization Bund Yield IRF at horizon 0:\n")
print(lpiv_res$irf_lin_mean[shockpos, 1])
cat("Pre-normalization Bund Yield IRF at horizon 0:\n")
print(lpiv_res$irf_lin_mean[shockpos, 1])
# === Define settings ===
output_vars <- c("d_rGDP", "d_HICP", "bund_yield")
horizons <- 0:(ncol(lpiv_res$irf_lin_mean) - 1)
# Colors
burgundy <- "#760020"
burgundy_trans <- rgb(118/255, 0, 32/255, alpha = 0.3)
# Output path
plot_path <- "Graphs/LP-IV/IRF_buildin_func.png"
# === Save to PNG ===
png(file.path(getwd(), plot_path),
width = 2000, height = 2400, res = 300)
# Layout for 3 variables
par(mfrow = c(3, 1), mar = c(5, 5, 4, 2),
cex.axis = 1.2, cex.lab = 1.2, cex.main = 1.5)
# === Plot each variable ===
for (i in seq_along(output_vars)) {
irf   <- lpiv_res$irf_lin_mean[i, ]
lower <- lpiv_res$irf_lin_low[i, ]
upper <- lpiv_res$irf_lin_up[i, ]
# 1) Full range auto-scale
irf_range <- range(c(irf, lower, upper), na.rm = TRUE)
buffer <- 0.1 * max(abs(irf_range))
y_min <- irf_range[1] - buffer
y_max <- irf_range[2] + buffer
# Base plot
plot(horizons, irf, type = "n",
ylim = c(y_min, y_max),
xlab = "Horizon (quarters)", ylab = "Impulse Response",
main = paste("Shock on", output_vars[i]))
polygon(c(horizons, rev(horizons)),
c(lower, rev(upper)),
col = burgundy_trans, border = NA)
lines(horizons, irf, type = "b", col = burgundy, lwd = 2, pch = 16)
abline(h = 0, lty = 2, col = "black")
grid()
axis(1, at = seq(0, max(horizons), by = 2))
}
# Close PNG device
dev.off()
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
lpiv_res <- lp_lin_iv(
endog_data = Y,
shock = shock,
use_twosls = F,         # Only 2nd stage, reduced-form
lags_endog_lin = NaN,         # You can change this to what you want
trend = 0,                  # No trend
confint = 1.96,             # 95% confidence band (normal approx)
use_nw = TRUE,              # Newey-West SEs
lags_criterion = "AIC",
max_lags = 9,
hor = 8                    # 12-quarter horizon
)
View(lpiv_res)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
# Load data
data <- readRDS("Data/LP-IV/input_data.rds")
names(data)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
names(d)
names(data)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
# Clear workspace and console
rm(list = ls())
cat("\014")
# Load required library
library(lpirfs)
library(dplyr) # Still useful for data handling before lpirfs
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Load data
data <- readRDS("Data/LP-IV/input_data.rds")
target_q <- readRDS("Data/LP-IV/tamas_instrument.rds") # Assuming this is your shock/instrument
# === DEFINE VARIABLES FOR ANALYSIS ===
# <<< ÆNDRING 1: Definer kun de ønskede outcome variable >>>
outcome_vars <- c("d_HICP", "bund_yield")
# Ensure data contains these variables and the shock
if (!all(outcome_vars %in% names(data))) {
stop("One or more outcome variables not found in 'data'. Available: ", paste(names(data), collapse=", "))
}
if (length(target_q) != nrow(data)) {
warning("Length of 'target_q' (shock) does not match rows in 'data'. Alignment issues might occur.")
# Consider aligning them here if necessary, e.g., using timestamps if available
}
# === PREPARE DATA FOR LPIRFS ===
# Create shock and response matrices/data frames
# Note: lpirfs usually prefers data frames or tibbles
Y <- data[, outcome_vars, drop = FALSE] # Use drop=FALSE to ensure it stays data frame/matrix
shock_df <- data.frame(shock = target_q)
# Combine for consistent NA handling
df_for_na <- cbind(Y, shock_df)
# na.omit removes rows with NA in ANY selected column (Y or shock)
df_cleaned <- na.omit(df_for_na)
# Check if data remains after NA removal
if (nrow(df_cleaned) == 0) {
stop("No observations remaining after removing NAs from selected outcomes and shock.")
} else {
print(paste("Observations remaining after NA removal:", nrow(df_cleaned)))
}
# Extract cleaned data for lpirfs function
# endog_data needs to be matrix, data.frame or tibble
Y_cleaned <- df_cleaned[, outcome_vars, drop = FALSE]
# shock needs to be data.frame or tibble
shock_cleaned <- df_cleaned[, "shock", drop = FALSE] # Ensure it stays a data frame
# === ESTIMATE LP-IV MODEL ===
lpiv_results <- lp_lin_iv(
endog_data = Y_cleaned,       # Use cleaned endogenous data
shock = shock_cleaned,        # Use cleaned shock data frame
use_twosls = FALSE,           # Reduced form (regress Y directly on instrument)
lags_endog_lin = NULL,        # <<< ÆNDRING 2: NULL er mere standard for auto-selection >>>
trend = 0,                    # No trend
confint = 1.96,               # 95% confidence interval width
use_nw = TRUE,                # Use Newey-West standard errors
lags_criterion = "AIC",       # Criterion for lag length selection
max_lags = 9,                 # Maximum lags for auto-selection
hor = 8                       # Horizon (0 to 8)
)
View(shock_cleaned)
# Extract cleaned data for lpirfs function
# endog_data needs to be matrix, data.frame or tibble
Y_cleaned <- df_cleaned[, outcome_vars, drop = FALSE]
# shock needs to be data.frame or tibble
shock_cleaned <- df_cleaned[, "shock", drop = FALSE] # Ensure it stays a data frame
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Clear workspace and console
rm(list = ls())
cat("\014")
# Load required library
library(lpirfs)
library(dplyr)
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Load data
data <- readRDS("Data/LP-IV/input_data.rds")
target_q <- readRDS("Data/LP-IV/tamas_instrument.rds") # Assuming this is your shock/instrument
# === DEFINE VARIABLES FOR ANALYSIS ===
# Define only the desired outcome variables
outcome_vars <- c("d_HICP", "bund_yield")
# Basic data checks
if (!all(outcome_vars %in% names(data))) {
stop("One or more outcome variables not found in 'data'.")
}
if (length(target_q) != nrow(data)) {
warning("Length of shock ('target_q') might not match data rows.")
}
# === PREPARE DATA FOR LPIRFS ===
Y <- data[, outcome_vars, drop = FALSE]
shock_df <- data.frame(shock = target_q)
df_for_na <- cbind(Y, shock_df)
df_cleaned <- na.omit(df_for_na)
if (nrow(df_cleaned) == 0) {
stop("No observations remaining after NA removal.")
} else {
print(paste("Observations remaining after NA removal:", nrow(df_cleaned)))
}
Y_cleaned <- df_cleaned[, outcome_vars, drop = FALSE]
shock_cleaned <- df_cleaned[, "shock", drop = FALSE]
# === ESTIMATE LP-IV MODEL ===
lpiv_res <- lp_lin_iv(
endog_data = Y_cleaned,
shock = shock_cleaned,
use_twosls = FALSE,
lags_endog_lin = NaN, # Use NaN for auto lag selection based on criterion
trend = 0,
confint = 1.96,
use_nw = TRUE,
lags_criterion = "AIC",
max_lags = 9,
hor = 8
)
if (is.null(lpiv_res) || is.null(lpiv_res$irf_lin_mean)) {
stop("lp_lin_iv failed to produce results.")
}
# === NORMALIZE RESULTS (Set bund_yield impact to +1) ===
shock_var_name <- "bund_yield"
shockpos <- match(shock_var_name, outcome_vars) # Will be 2
if (is.na(shockpos)) {
warning("Shock variable not found. Skipping normalization.")
} else {
impact_response <- lpiv_res$irf_lin_mean[shockpos, 1]
cat("Pre-normalization Bund Yield IRF at horizon 0:\n")
print(impact_response)
if (!is.na(impact_response) && impact_response != 0 && is.finite(impact_response)) {
scaling_factor <- 1 / impact_response
lpiv_res$irf_lin_mean <- lpiv_res$irf_lin_mean * scaling_factor
lpiv_res$irf_lin_low  <- lpiv_res$irf_lin_low  * scaling_factor
lpiv_res$irf_lin_up   <- lpiv_res$irf_lin_up   * scaling_factor
cat("Post-normalization Bund Yield IRF at horizon 0 (should be approx. 1):\n")
print(lpiv_res$irf_lin_mean[shockpos, 1])
} else {
warning("Invalid impact response. Skipping normalization.")
}
}
# === PLOT RESULTS ===
# Use the outcome variable names for plotting titles etc.
output_vars <- outcome_vars # output_vars is now c("d_HICP", "bund_yield")
horizons <- 0:(ncol(lpiv_res$irf_lin_mean) - 1)
# === Plot settings provided by user ===
# Colors
burgundy <- "#760020"
burgundy_trans <- rgb(118/255, 0, 32/255, alpha = 0.3)
# Output path (ensure Graphs/LP-IV directory exists)
plot_dir <- "Graphs/LP-IV"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
plot_path <- file.path(plot_dir, "IRF_buildin_func.png") # User specified filename
# === Save to PNG ===
png(plot_path, # Use file.path only if plot_dir is not already part of plot_path
width = 2000, height = 2400, res = 300)
# Layout for 3 variables (Note: only 2 variables will be plotted)
par(mfrow = c(2, 1), mar = c(5, 5, 4, 2),
cex.axis = 1.2, cex.lab = 1.2, cex.main = 1.5)
# === Plot each variable ===
# Loop will run for i = 1 and i = 2
for (i in seq_along(output_vars)) {
irf   <- lpiv_res$irf_lin_mean[i, ]
lower <- lpiv_res$irf_lin_low[i, ]
upper <- lpiv_res$irf_lin_up[i, ]
# Check for valid data to plot for this specific variable
if(all(is.na(c(irf, lower, upper)))) {
plot(0, type="n", xlim=c(0, max(horizons)), ylim=c(-1, 1),
main=paste("IRF for", output_vars[i], "(No data)"),
xlab="Horizon", ylab="Response")
text(mean(horizons), 0, "No data to plot", col="red")
next # Skip to next iteration
}
# Y-axis calculation from user input
irf_range <- range(c(irf, lower, upper), na.rm = TRUE)
buffer <- 0.1 * max(abs(irf_range), na.rm = TRUE) # Added na.rm=TRUE here just in case
# Handle case where range is zero or buffer is non-finite
if(!is.finite(buffer) || buffer < 1e-9) buffer <- 0.1
y_min <- irf_range[1] - buffer
y_max <- irf_range[2] + buffer
if(!is.finite(y_min)) y_min <- -1 # Fallback
if(!is.finite(y_max)) y_max <- 1 # Fallback
# Base plot (using user's title format)
plot(horizons, irf, type = "n",
ylim = c(y_min, y_max),
xlab = "Quarters", ylab = "IPR",
main = paste("", output_vars[i]), # User specified title
axes = FALSE) # Added axes=FALSE to use custom axis below
# Polygon (check for finite values before drawing)
finite_idx <- which(is.finite(lower) & is.finite(upper))
if(length(finite_idx) > 1) {
# Simplified polygon drawing - assumes contiguous data or accepts gaps
polygon(c(horizons[finite_idx], rev(horizons[finite_idx])),
c(lower[finite_idx], rev(upper[finite_idx])),
col = burgundy_trans, border = NA)
}
# Lines and points
lines(horizons, irf, type = "b", col = burgundy, lwd = 2, pch = 16)
# Zero line
abline(h = 0, lty = 2, col = "black")
# Grid
grid()
# Axis (Custom X-axis)
axis(1, at = seq(0, max(horizons), by = 2))
axis(2, las = 1) # Standard Y-axis
box()
} # End plotting loop
# Close PNG device
dev.off()
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1), oma=c(0,0,0,0)) # Reset plotting parameters
print(paste("Plot saved to:", plot_path))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/3) LP-IV/All 3 shocks LP-IV/LP-IV.R", echo=TRUE)
rm(list = ls())
cat("\014")
user <- Sys.info()[["user"]]
# Set working directory based on user
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Use working directory-relative paths
source(file.path("R kode", "Functions", "Functions.R"))
source(file.path("R kode", "Functions", "Load_Packages.R"))
library(dplyr)
library(zoo)
library(eurostat)
# Load required packages with error handling
required_packages <- c("dplyr", "AER", "dynlm", "car", "zoo", "readxl", "stargazer", "lubridate", "purrr")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
# List of countries: EA20 plus additional countries (allows flexibility)
countries <- c("EA20", "AT", "BE", "CY", "EE", "FI", "FR", "DE", "EL", "IE",
"IT", "LV", "LT", "LU", "MT", "NL", "PT", "SK", "SI", "ES", "DK")
# 1) Create the full dataset by merging country-specific data
raw_data <- map_dfr(countries, ~ get_country_dataset(.x))
source(file.path("R kode", "Functions", "Load_Packages.R"))
# Use working directory-relative paths
source(file.path("R kode", "Functions", "Functions.R"))
source(file.path("R kode", "Functions", "Functions.R"))
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/Functions/Functions.R")
rm(list = ls())
cat("\014")
library(lpirfs)
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Use working directory-relative paths
source(file.path("R kode", "Functions", "Functions.R"))
rm(list = ls())
cat("\014")
library(lpirfs)
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Use working directory-relative paths
source(file.path("R kode", "Functions", "Functions.R"))
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/Functions/Functions.R")
rm(list = ls())
cat("\014")
library(lpirfs)
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Use working directory-relative paths
#source(file.path("R kode", "Functions", "Functions.R"))
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/Functions/Functions.R")
rm(list = ls())
cat("\014")
library(lpirfs)
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
rm(list = ls())
cat("\014")
library(lpirfs)
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Load data
data <- readRDS("Data/LP-IV/input_data.rds")
target_q <- readRDS("Data/LP-IV/tamas_instrument.rds")
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
rm(list = ls())
cat("\014")
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Use working directory-relative paths
#source(file.path("R kode", "Functions", "Functions.R"))
source("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3/R kode/Functions/Functions.R")
source(file.path("R kode", "Functions", "Load_Packages.R"))
# Use working directory-relative paths
#source(file.path("R kode", "Functions", "Functions.R"))
source("Functions/Functions.R")
# Use working directory-relative paths
#source(file.path("R kode", "Functions", "Functions.R"))
source(file.path(("R kode", "Functions","Functions.R"))
# Use working directory-relative paths
#source(file.path("R kode", "Functions", "Functions.R"))
source(file.path("R kode", "Functions","Functions.R"))
rm(list = ls())
cat("\014")
# Set working directory (adjust as needed)
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/Økonomi - Kandidat/Heterogenous-spillover-ECB/")
} else if (user == "B362561") {
setwd("C:/Users/B362561/Desktop/OscarErnst-Heterogenous-spillover-ECB-3")
} else if (user == "Kasper") {
setwd("HER_INDSÆT_STI_FOR_KASPER")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Use working directory-relative paths
source(file.path("R kode", "Functions","Functions.R"))
source(file.path("R kode", "Functions", "Load_Packages.R"))
