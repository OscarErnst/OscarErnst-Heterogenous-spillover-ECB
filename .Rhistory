cat("\nJoint F-test Results:\n")
print(joint_test)
# Henter nu Bundesbank data
Bund_length <- "2Y"
Bundes_yield <- read_excel(file.path("Data", "Generic Bundesbank yield.xlsx")) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
Bund_6M_m <- ts(Bundes_yield[[Bund_length]], start = start_month, frequency = 12)
d_Bund_6M_m <- diff(Bund_6M_m) * 100
d_Bund_6M_m <- window(ts(c(NA, d_Bund_6M_m), start = start_month, frequency = 12),
start = start_month, end = end_month)
Bund_6M_m <- window(Bund_6M_m, start = start_month, end = end_month)
# -------------------------------------------------------------------------
# 3. Combine Data and Create Time Series Object
# -------------------------------------------------------------------------
shocks_data <- cbind(
pureMP_m       = as.numeric(pureMP_m),
Path_m       = as.numeric(Path_m),
QE_m       = as.numeric(QE_m),
Bund_6M_m      = as.numeric(Bund_6M_m),
d_rGDP_m       = as.numeric(d_rGDP_m),
d_HICP_m       = as.numeric(d_HICP_m),
GFC_dummy = ifelse(as.yearmon(time(pureMP_m)) >= as.yearmon("2007-01") &
as.yearmon(time(pureMP_m)) <= as.yearmon("2007-09"), 1, 0)
)
shocks_ts <- ts(shocks_data, start = start_month, frequency = 12)
# -------------------------------------------------------------------------
# 4. First-Stage Regression
# -------------------------------------------------------------------------
FirstStage <- dynlm(
Bund_6M_m ~ pureMP_m + Path_m + QE_m +
L(pureMP_m, 1:12) + L(Path_m, 1:12) + L(QE_m, 1:12) +
L(Bund_6M_m, 1:12) + L(d_rGDP_m, 1:12) + L(d_HICP_m, 1:12),
data = shocks_ts
)
cat("\nFirst Stage Regression Results:\n")
print(summary(FirstStage))
# Joint significance test
joint_test <- linearHypothesis(
FirstStage,
paste(names(coef(FirstStage))[grepl("pureMP_m", names(coef(FirstStage)))], "= 0")
)
cat("\nJoint F-test Results:\n")
print(joint_test)
# Clear workspace and console
rm(list = ls())
cat("\014")
# Set working directory based on system user
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "kasper") {
setwd("/Users/kasper/Documents/GitHub/OscarErnst-Heterogenous-spillover-ECB")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Load required packages with error handling
required_packages <- c("dplyr", "AER", "dynlm", "car", "zoo", "readxl", "stargazer", "lubridate")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
# Define color palette for plotting
burgundy <- "#760020"
burgundy_trans <- rgb(118/255, 0, 32/255, alpha = 0.3)
start_month <- c(2005, 1)
end_month   <- c(2019, 12)
start_date <- as.Date(sprintf("%d-%02d-01", start_month[1], start_month[2]))
end_date   <- as.Date(sprintf("%d-%02d-01", end_month[1], end_month[2]))
create_ts <- function(data, var_name, start_date, end_date) {
ts(data[[var_name]], start = c(year(start_date), month(start_date)), frequency = 12)
}
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/Own_mpshock_release.RData")
# Henter shocks:
#shock <- load_data(
#  file.path("Instrumenter", "all_3_shocks.rds"),
#  "PureMP_shocks_m.rds not found"
#) %>%
#  filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
pureMP_m <- ts(shock$pureMP_m, start = start_month, end = end_month, frequency = 12)
# Henter Kontrol Variable:
control <- load_data(
file.path("Data", "Interpolated data", "control_var_m.rds"),
"control_var_m.rds not found"
) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
d_rGDP_m <- create_ts(control, "d_rGDP_m", start_date, end_date)
# Clear workspace and console
rm(list = ls())
cat("\014")
# Set working directory based on system user
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "kasper") {
setwd("/Users/kasper/Documents/GitHub/OscarErnst-Heterogenous-spillover-ECB")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Load required packages with error handling
required_packages <- c("dplyr", "AER", "dynlm", "car", "zoo", "readxl", "stargazer", "lubridate")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
# Define color palette for plotting
burgundy <- "#760020"
burgundy_trans <- rgb(118/255, 0, 32/255, alpha = 0.3)
# -------------------------------------------------------------------------
# 1. Set Date Range for Monthly Data
# -------------------------------------------------------------------------
start_month <- c(2005, 1)
end_month   <- c(2019, 12)
start_date <- as.Date(sprintf("%d-%02d-01", start_month[1], start_month[2]))
end_date   <- as.Date(sprintf("%d-%02d-01", end_month[1], end_month[2]))
create_ts <- function(data, var_name, start_date, end_date) {
ts(data[[var_name]], start = c(year(start_date), month(start_date)), frequency = 12)
}
# -------------------------------------------------------------------------
# 2. Load and Validate Data
# -------------------------------------------------------------------------
load_data <- function(file_path, error_msg) {
if (!file.exists(file_path)) stop(error_msg)
readRDS(file_path)
}
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/Own_mpshock_release.RData")
# Henter shocks:
#shock <- load_data(
#  file.path("Instrumenter", "all_3_shocks.rds"),
#  "PureMP_shocks_m.rds not found"
#) %>%
#  filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
#pureMP_m <- ts(shock$pureMP_m, start = start_month, end = end_month, frequency = 12)
#Path_m <- ts(shock$Path_m, start = start_month, end = end_month, frequency = 12)
#QE_m <- ts(shock$QE_m, start = start_month, end = end_month, frequency = 12)
# Henter Kontrol Variable:
control <- load_data(
file.path("Data", "Interpolated data", "control_var_m.rds"),
"control_var_m.rds not found"
) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
d_rGDP_m <- create_ts(control, "d_rGDP_m", start_date, end_date)
d_HICP_m <- create_ts(control, "d_HICP_m", start_date, end_date)
# Henter nu Bundesbank data
Bund_length <- "2Y"
Bundes_yield <- read_excel(file.path("Data", "Generic Bundesbank yield.xlsx")) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
Bund_6M_m <- ts(Bundes_yield[[Bund_length]], start = start_month, frequency = 12)
d_Bund_6M_m <- diff(Bund_6M_m) * 100
d_Bund_6M_m <- window(ts(c(NA, d_Bund_6M_m), start = start_month, frequency = 12),
start = start_month, end = end_month)
Bund_6M_m <- window(Bund_6M_m, start = start_month, end = end_month)
# -------------------------------------------------------------------------
# 3. Combine Data and Create Time Series Object
# -------------------------------------------------------------------------
shocks_data <- cbind(
pureMP_m       = as.numeric(pureMP_m),
Path_m       = as.numeric(Path_m),
QE_m       = as.numeric(QE_m),
Bund_6M_m      = as.numeric(Bund_6M_m),
d_rGDP_m       = as.numeric(d_rGDP_m),
d_HICP_m       = as.numeric(d_HICP_m),
GFC_dummy = ifelse(as.yearmon(time(pureMP_m)) >= as.yearmon("2007-01") &
as.yearmon(time(pureMP_m)) <= as.yearmon("2007-09"), 1, 0)
)
# Clear workspace and console
rm(list = ls())
cat("\014")
# Set working directory based on system user
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "kasper") {
setwd("/Users/kasper/Documents/GitHub/OscarErnst-Heterogenous-spillover-ECB")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
# Load required packages with error handling
required_packages <- c("dplyr", "AER", "dynlm", "car", "zoo", "readxl", "stargazer", "lubridate")
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/IV_mpshock_release (1).RData")
# Define color palette for plotting
burgundy <- "#760020"
burgundy_trans <- rgb(118/255, 0, 32/255, alpha = 0.3)
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/IV_mpshock_release (1).RData")
# Clear workspace and console
rm(list = ls())
cat("\014")
library(lpirfs)
# ─────────────────────────────────────────────────────────────────────────
# 1. Working directory and data load (same as before)
# ─────────────────────────────────────────────────────────────────────────
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "kasper") {
setwd("/Users/kasper/Documents/GitHub/OscarErnst-Heterogenous-spillover-ECB")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
data   <- readRDS("Data/LP-IV/Kun PureMP/input_data.rds")
PureMP <- readRDS("Data/LP-IV/Kun PureMP/Bund_instrument.rds")
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/IV_mpshock_release (1).RData")
shock_var_q <- window(shock_var_q, c(2005,1), c(2019, 4))
shock_var_q <- window(shock_var_q, c(2026,1), c(2019, 4))
# Clear workspace and console
rm(list = ls())
cat("\014")
library(lpirfs)
# ─────────────────────────────────────────────────────────────────────────
# 1. Working directory and data load (same as before)
# ─────────────────────────────────────────────────────────────────────────
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "kasper") {
setwd("/Users/kasper/Documents/GitHub/OscarErnst-Heterogenous-spillover-ECB")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
data   <- readRDS("Data/LP-IV/Kun PureMP/input_data.rds")
PureMP <- readRDS("Data/LP-IV/Kun PureMP/Bund_instrument.rds")
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/IV_mpshock_release (1).RData")
shock_var_q <- window(shock_var_q, c(2026,1), c(2019, 4))
shock_var_q <- window(shock_var_q, c(2006,1), c(2019, 4))
# Define outcome variables (unchanged)
outcome_vars <- c("d_HICP", "d_rGDP", "bund_yield")
# Nice display names for each variable:
pretty_names <- list(
"d_HICP"        = "HICP",
"d_rGDP"        = "Real GDP",
"d_Consumption" = "Consumption",
"bund_yield"    = "Bund Yield"
)
PureMP <- window(shock_var_q, c(2006,1), c(2019, 4))
# Define outcome variables (unchanged)
outcome_vars <- c("d_HICP", "d_rGDP", "bund_yield")
# Nice display names for each variable:
pretty_names <- list(
"d_HICP"        = "HICP",
"d_rGDP"        = "Real GDP",
"d_Consumption" = "Consumption",
"bund_yield"    = "Bund Yield"
)
# ─────────────────────────────────────────────────────────────────────────
# 2. LP‐IV estimation (same as before)
# ─────────────────────────────────────────────────────────────────────────
Y     <- data[, outcome_vars]
shock <- data.frame(shock = PureMP)
df <- na.omit(cbind(Y, shock))
Y     <- df[, outcome_vars]
shock <- df[, "shock", drop = FALSE]
lpiv_res <- lp_lin_iv(
endog_data     = Y,
shock          = shock,
use_twosls     = FALSE,
lags_endog_lin = NaN,
trend          = 0,
confint        = 1.70,  # ~95% CI
use_nw         = TRUE,
lags_criterion = "AIC",
max_lags       = 9,
hor            = 7
)
plot(lpiv_res)
# Clear workspace and console
rm(list = ls())
cat("\014")
library(lpirfs)
# ─────────────────────────────────────────────────────────────────────────
# 1. Working directory and data load (same as before)
# ─────────────────────────────────────────────────────────────────────────
user <- Sys.info()[["user"]]
if (user == "OscarEAM") {
setwd("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB")
} else if (user == "Oscar_dream") {
setwd("HER_INDSÆT_STI_FOR_OSCAR_DREAM")
} else if (user == "kasper") {
setwd("/Users/kasper/Documents/GitHub/OscarErnst-Heterogenous-spillover-ECB")
} else {
stop("Ukendt bruger – tilføj sti for denne bruger.")
}
data   <- readRDS("Data/LP-IV/Kun PureMP/input_data.rds")
PureMP <- readRDS("Data/LP-IV/Kun PureMP/Bund_instrument.rds")
load("/Users/OscarEAM/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/IV_mpshock_release (1).RData")
PureMP <- window(shock_var_q, c(2006,1), c(2019, 4))
# Define outcome variables (unchanged)
outcome_vars <- c("d_HICP", "d_rGDP", "bund_yield")
# Nice display names for each variable:
pretty_names <- list(
"d_HICP"        = "HICP",
"d_rGDP"        = "Real GDP",
"d_Consumption" = "Consumption",
"bund_yield"    = "Bund Yield"
)
# ─────────────────────────────────────────────────────────────────────────
# 2. LP‐IV estimation (same as before)
# ─────────────────────────────────────────────────────────────────────────
Y     <- data[, outcome_vars]
shock <- data.frame(shock = PureMP)
df <- na.omit(cbind(Y, shock))
Y     <- df[, outcome_vars]
shock <- df[, "shock", drop = FALSE]
lpiv_res <- lp_lin_iv(
endog_data     = Y,
shock          = shock,
use_twosls     = FALSE,
lags_endog_lin = NaN,
trend          = 0,
confint        = 1.70,  # ~95% CI
use_nw         = TRUE,
lags_criterion = "AIC",
max_lags       = 9,
hor            = 7
)
plot(lpiv_res)
source("~/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/R kode/3) LP-IV/Alle 3 stød/1 Stage.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/R kode/3) LP-IV/Alle 3 stød/1 Stage.R", echo=TRUE)
# Henter shocks:
shock <- load_data(
# Henter shocks:
shock <- load_data(file.path("Instrumenter", "all_3_shocks.rds"),
"PureMP_shocks_m.rds not found") %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
# Henter shocks:
shock <- load_data(file.path("Instrumenter", "all_3_shocks.rds"),
# Henter shocks:
shock <- load_data(file.path("Instrumenter", "all_3_shocks.rds"),
"PureMP_shocks_m.rds not found") %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
pureMP_m <- ts(shock$pureMP_m, start = start_month, end = end_month, frequency = 12)
Path_m <- ts(shock$Path_m, start = start_month, end = end_month, frequency = 12)
QE_m <- ts(shock$QE_m, start = start_month, end = end_month, frequency = 12)
# Henter Kontrol Variable:
control <- load_data(
file.path("Data", "Interpolated data", "control_var_m.rds"),
"control_var_m.rds not found"
) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
d_rGDP_m <- create_ts(control, "d_rGDP_m", start_date, end_date)
d_HICP_m <- create_ts(control, "d_HICP_m", start_date, end_date)
# Henter nu Bundesbank data
Bund_length <- "2Y"
Bundes_yield <- read_excel(file.path("Data", "Generic Bundesbank yield.xlsx")) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
Bund_6M_m <- ts(Bundes_yield[[Bund_length]], start = start_month, frequency = 12)
d_Bund_6M_m <- diff(Bund_6M_m) * 100
d_Bund_6M_m <- window(ts(c(NA, d_Bund_6M_m), start = start_month, frequency = 12),
start = start_month, end = end_month)
Bund_6M_m <- window(Bund_6M_m, start = start_month, end = end_month)
# -------------------------------------------------------------------------
# 3. Combine Data and Create Time Series Object
# -------------------------------------------------------------------------
shocks_data <- cbind(
pureMP_m       = as.numeric(pureMP_m),
Path_m       = as.numeric(Path_m),
QE_m       = as.numeric(QE_m),
Bund_6M_m      = as.numeric(Bund_6M_m),
d_rGDP_m       = as.numeric(d_rGDP_m),
d_HICP_m       = as.numeric(d_HICP_m),
GFC_dummy = ifelse(as.yearmon(time(pureMP_m)) >= as.yearmon("2007-01") &
as.yearmon(time(pureMP_m)) <= as.yearmon("2007-09"), 1, 0)
)
shocks_ts <- ts(shocks_data, start = start_month, frequency = 12)
# -------------------------------------------------------------------------
# 4. First-Stage Regression
# -------------------------------------------------------------------------
FirstStage <- dynlm(
Bund_6M_m ~ pureMP_m + Path_m + QE_m +
L(Bund_6M_m, 1:12) + L(d_rGDP_m, 1:12) + L(d_HICP_m, 1:12),
data = shocks_ts
)
cat("\nFirst Stage Regression Results:\n")
print(summary(FirstStage))
# Joint significance test
joint_test <- linearHypothesis(
FirstStage,
paste(names(coef(FirstStage))[grepl("pureMP_m", names(coef(FirstStage)))], "= 0")
)
cat("\nJoint F-test Results:\n")
print(joint_test)
# Henter nu Bundesbank data
Bund_length <- "1Y"
Bundes_yield <- read_excel(file.path("Data", "Generic Bundesbank yield.xlsx")) %>%
filter(year(Date) >= start_month[1], year(Date) <= end_month[1])
Bund_6M_m <- ts(Bundes_yield[[Bund_length]], start = start_month, frequency = 12)
d_Bund_6M_m <- diff(Bund_6M_m) * 100
d_Bund_6M_m <- window(ts(c(NA, d_Bund_6M_m), start = start_month, frequency = 12),
start = start_month, end = end_month)
Bund_6M_m <- window(Bund_6M_m, start = start_month, end = end_month)
# -------------------------------------------------------------------------
# 3. Combine Data and Create Time Series Object
# -------------------------------------------------------------------------
shocks_data <- cbind(
pureMP_m       = as.numeric(pureMP_m),
Path_m       = as.numeric(Path_m),
QE_m       = as.numeric(QE_m),
Bund_6M_m      = as.numeric(Bund_6M_m),
d_rGDP_m       = as.numeric(d_rGDP_m),
d_HICP_m       = as.numeric(d_HICP_m),
GFC_dummy = ifelse(as.yearmon(time(pureMP_m)) >= as.yearmon("2007-01") &
as.yearmon(time(pureMP_m)) <= as.yearmon("2007-09"), 1, 0)
)
shocks_ts <- ts(shocks_data, start = start_month, frequency = 12)
# -------------------------------------------------------------------------
# 4. First-Stage Regression
# -------------------------------------------------------------------------
FirstStage <- dynlm(
Bund_6M_m ~ pureMP_m + Path_m + QE_m +
L(Bund_6M_m, 1:12) + L(d_rGDP_m, 1:12) + L(d_HICP_m, 1:12),
data = shocks_ts
)
cat("\nFirst Stage Regression Results:\n")
print(summary(FirstStage))
# Joint significance test
joint_test <- linearHypothesis(
FirstStage,
paste(names(coef(FirstStage))[grepl("pureMP_m", names(coef(FirstStage)))], "= 0")
)
cat("\nJoint F-test Results:\n")
print(joint_test)
# -------------------------------------------------------------------------
# 4. First-Stage Regression
# -------------------------------------------------------------------------
FirstStage <- dynlm(
Bund_6M_m ~ pureMP_m + Path_m + QE_m +
L(pureMP_m, 1:12) + L(Path_m, 1:12) + L(QE_m, 1:12)
L(Bund_6M_m, 1:12) + L(d_rGDP_m, 1:12) + L(d_HICP_m, 1:12),
# -------------------------------------------------------------------------
# 4. First-Stage Regression
# -------------------------------------------------------------------------
FirstStage <- dynlm(
Bund_6M_m ~ pureMP_m + Path_m + QE_m +
L(pureMP_m, 1:12) + L(Path_m, 1:12) + L(QE_m, 1:12) +
L(Bund_6M_m, 1:12) + L(d_rGDP_m, 1:12) + L(d_HICP_m, 1:12),
data = shocks_ts
)
cat("\nFirst Stage Regression Results:\n")
print(summary(FirstStage))
# Joint significance test
joint_test <- linearHypothesis(
FirstStage,
paste(names(coef(FirstStage))[grepl("pureMP_m", names(coef(FirstStage)))], "= 0")
)
cat("\nJoint F-test Results:\n")
print(joint_test)
# -------------------------------------------------------------------------
# 4. First-Stage Regression
# -------------------------------------------------------------------------
FirstStage <- dynlm(
Bund_6M_m ~ pureMP_m + Path_m + QE_m +
L(pureMP_m, 1:2) + L(Path_m, 1:2) + L(QE_m, 1:2) +
L(Bund_6M_m, 1:12) + L(d_rGDP_m, 1:12) + L(d_HICP_m, 1:12),
data = shocks_ts
)
cat("\nFirst Stage Regression Results:\n")
print(summary(FirstStage))
# Joint significance test
joint_test <- linearHypothesis(
FirstStage,
paste(names(coef(FirstStage))[grepl("pureMP_m", names(coef(FirstStage)))], "= 0")
)
cat("\nJoint F-test Results:\n")
print(joint_test)
cat("\nFirst Stage Regression Results:\n")
print(summary(FirstStage))
# Joint significance test
joint_test <- linearHypothesis(
FirstStage,
paste(names(coef(FirstStage))[grepl("pureMP_m", names(coef(FirstStage)))], "= 0")
)
cat("\nJoint F-test Results:\n")
print(joint_test)
# Newey-West standard errors
cat("\nNewey-West Standard Errors:\n")
print(coeftest(FirstStage, vcov = NeweyWest(FirstStage)))
# -------------------------------------------------------------------------
# 5. Create and Save Quarterly Instrument
# -------------------------------------------------------------------------
Bund_6M_m_hat <- fitted.values(FirstStage)
create_quarterly_ts <- function(monthly_data) {
monthly_zoo <- zoo(coredata(monthly_data), as.yearmon(time(monthly_data)))
quarterly_zoo <- aggregate(monthly_zoo, as.yearqtr, mean)
as.ts(quarterly_zoo)
}
# OBS: We lose the first 2 quarters, as we use 12 lags in the 1.stage.
shock_var_q_ts <- create_quarterly_ts(Bund_6M_m_hat)
saveRDS(shock_var_q_ts, file = file.path("Data","LP-IV","Kun PureMP","Bund_instrument.rds"))
cat("\nQuarterly instrument saved to", file.path("Data","LP-IV","Kun PureMP","Bund_instrument.rds"), "\n")
saveRDS(shock_var_q_ts, file = file.path("Data","LP-IV","Alle shocks","Bund_instrument.rds"))
cat("\nQuarterly instrument saved to", file.path("Data","LP-IV","Kun PureMP","Bund_instrument.rds"), "\n")
source("~/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/R kode/3) LP-IV/Alle 3 stød/1 Stage.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/R kode/3) LP-IV/Alle 3 stød/1 Stage.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCopenhagen/OscarErnst-Heterogenous-spillover-ECB/R kode/3) LP-IV/Pure MP stød/1) 1.Stage.R", echo=TRUE)
